"""Initial schema with customers, drivers, routes, and route_stops tables

Revision ID: 8ca7afdd9df6
Revises: 
Create Date: 2025-10-23 17:49:50.352855

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '8ca7afdd9df6'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('customers',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('address', sa.String(length=500), nullable=False),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('service_type', sa.String(length=20), nullable=False, comment='residential or commercial'),
    sa.Column('difficulty', sa.Integer(), nullable=False, comment='1-5 difficulty scale affecting service duration'),
    sa.Column('service_day', sa.String(length=20), nullable=False, comment='monday, tuesday, wednesday, thursday, friday, saturday, sunday'),
    sa.Column('locked', sa.Boolean(), nullable=False, comment='If true, cannot be moved to a different service day during optimization'),
    sa.Column('time_window_start', sa.Time(), nullable=True, comment='Earliest time customer can be serviced'),
    sa.Column('time_window_end', sa.Time(), nullable=True, comment='Latest time customer can be serviced'),
    sa.Column('notes', sa.String(length=1000), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_customers_id'), 'customers', ['id'], unique=False)
    op.create_index(op.f('ix_customers_name'), 'customers', ['name'], unique=False)
    op.create_index(op.f('ix_customers_service_day'), 'customers', ['service_day'], unique=False)
    op.create_index(op.f('ix_customers_service_type'), 'customers', ['service_type'], unique=False)
    op.create_table('drivers',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('start_location_address', sa.String(length=500), nullable=False),
    sa.Column('start_latitude', sa.Float(), nullable=True),
    sa.Column('start_longitude', sa.Float(), nullable=True),
    sa.Column('end_location_address', sa.String(length=500), nullable=False),
    sa.Column('end_latitude', sa.Float(), nullable=True),
    sa.Column('end_longitude', sa.Float(), nullable=True),
    sa.Column('working_hours_start', sa.Time(), nullable=False, comment='Start of workday'),
    sa.Column('working_hours_end', sa.Time(), nullable=False, comment='End of workday'),
    sa.Column('max_customers_per_day', sa.Integer(), nullable=False, comment='Maximum number of customers this driver can service in one day'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether this driver is currently active/available'),
    sa.Column('notes', sa.String(length=1000), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_drivers_id'), 'drivers', ['id'], unique=False)
    op.create_index(op.f('ix_drivers_name'), 'drivers', ['name'], unique=False)
    op.create_table('routes',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('driver_id', sa.UUID(), nullable=False),
    sa.Column('service_day', sa.String(length=20), nullable=False, comment='monday, tuesday, wednesday, thursday, friday, saturday, sunday'),
    sa.Column('total_duration_minutes', sa.Integer(), nullable=True, comment='Total route duration including driving and service time'),
    sa.Column('total_distance_miles', sa.Float(), nullable=True, comment='Total driving distance in miles'),
    sa.Column('total_customers', sa.Integer(), nullable=True, comment='Total number of customers on this route'),
    sa.Column('optimization_algorithm', sa.String(length=100), nullable=True, comment='Algorithm used to generate this route'),
    sa.Column('optimization_score', sa.Float(), nullable=True, comment='Quality score of the optimization (if available)'),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_routes_created_at'), 'routes', ['created_at'], unique=False)
    op.create_index(op.f('ix_routes_driver_id'), 'routes', ['driver_id'], unique=False)
    op.create_index(op.f('ix_routes_id'), 'routes', ['id'], unique=False)
    op.create_index(op.f('ix_routes_service_day'), 'routes', ['service_day'], unique=False)
    op.create_table('route_stops',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('route_id', sa.UUID(), nullable=False),
    sa.Column('customer_id', sa.UUID(), nullable=False),
    sa.Column('sequence', sa.Integer(), nullable=False, comment='Order of this stop in the route (1-based)'),
    sa.Column('estimated_arrival_time', sa.Time(), nullable=True, comment='Estimated time of arrival at this customer'),
    sa.Column('estimated_service_duration', sa.Integer(), nullable=True, comment='Estimated service time in minutes'),
    sa.Column('estimated_drive_time_from_previous', sa.Integer(), nullable=True, comment='Estimated driving time from previous stop in minutes'),
    sa.Column('estimated_distance_from_previous', sa.Float(), nullable=True, comment='Distance from previous stop in miles'),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['route_id'], ['routes.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_route_stops_customer_id'), 'route_stops', ['customer_id'], unique=False)
    op.create_index(op.f('ix_route_stops_id'), 'route_stops', ['id'], unique=False)
    op.create_index(op.f('ix_route_stops_route_id'), 'route_stops', ['route_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_route_stops_route_id'), table_name='route_stops')
    op.drop_index(op.f('ix_route_stops_id'), table_name='route_stops')
    op.drop_index(op.f('ix_route_stops_customer_id'), table_name='route_stops')
    op.drop_table('route_stops')
    op.drop_index(op.f('ix_routes_service_day'), table_name='routes')
    op.drop_index(op.f('ix_routes_id'), table_name='routes')
    op.drop_index(op.f('ix_routes_driver_id'), table_name='routes')
    op.drop_index(op.f('ix_routes_created_at'), table_name='routes')
    op.drop_table('routes')
    op.drop_index(op.f('ix_drivers_name'), table_name='drivers')
    op.drop_index(op.f('ix_drivers_id'), table_name='drivers')
    op.drop_table('drivers')
    op.drop_index(op.f('ix_customers_service_type'), table_name='customers')
    op.drop_index(op.f('ix_customers_service_day'), table_name='customers')
    op.drop_index(op.f('ix_customers_name'), table_name='customers')
    op.drop_index(op.f('ix_customers_id'), table_name='customers')
    op.drop_table('customers')
    # ### end Alembic commands ###
